"""
Graph Network global parameters
"""
type GraphNetwork @entity {
  "ID is set to 1"
  id: ID!
  "Controller address"
  controller: Bytes!
  "Graph token address"
  graphToken: Bytes!
  "Epoch manager address"
  epochManager: Bytes!
  "Epoch Manager implementations. Last in the array is current"
  epochManagerImplementations: [Bytes!]!
  "Curation address"
  curation: Bytes!
  "Curation implementations. Last in the array is current"
  curationImplementations: [Bytes!]!
  "Staking address"
  staking: Bytes!
  "Graph token implementations. Last in the array is current"
  stakingImplementations: [Bytes!]!
  "Dispute manager address"
  disputeManager: Bytes!
  "GNS address"
  gns: Bytes!
  "Service registry address"
  serviceRegistry: Bytes!
  "Rewards manager address"
  rewardsManager: Bytes!
  "Rewards Manager implementations. Last in the array is current"
  rewardsManagerImplementations: [Bytes!]!
  "True if the protocol is paused"
  isPaused: Boolean!
  "True if the protocol is partially paused"
  isPartialPaused: Boolean!
  "Governor of the controller i.e. the whole protocol"
  governor: Bytes!
  "Pause guardian address"
  pauseGuardian: Bytes!

  # Staking global parameters
  "Percentage of fees going to curators"
  curationPercentage: Int!
  "Percentage of fees burn as protocol fee"
  protocolFeePercentage: Int!
  "Ratio of max staked delegation tokens to indexers stake that earns rewards"
  delegationCapacity: Int!
  "Period to wait before fees can be claimed in rebate pool"
  channelDisputeEpochs: Int!
  "Period to wait before delegators can settle"
  maxAllocationEpochs: Int!
  "Time in blocks needed to wait to unstake"
  thawingPeriod: Int!
  "Minimum time an Indexer must use for resetting their Delegation parameters"
  delegationParametersCooldown: Int!
  "The number of times indexing rewards are handed out each epoch"
  indexingRewardsPerEpoch: Int!

  "Time in epochs a delegator needs to wait to withdraw delegated stake"
  delegationUnbondingPeriod: Int!

  # Staking global aggregate values
  "The total amount of GRT staked in the staking contract"
  totalTokensStaked: BigInt!
  "Total tokens that are settled and waiting to be claimed"
  totalTokensClaimable: BigInt!
  "Total tokens that are currently locked or withdrawable in the network from unstaking"
  totalUnstakedTokensLocked: BigInt!
  "Total GRT currently in allocation"
  totalTokensAllocated: BigInt!
  "Total query fees collected all time in the network in GRT"
  totalQueryFees: BigInt!
  "Total delegated tokens in the protocol"
  totalDelegatedTokens: BigInt!
  "Total indexing rewards earned"
  totalIndexingRewards: BigInt!

  # Rewards manager global parameters
  "The issuance rate that GRT is minted at for rewards to staked Indexers"
  networkGRTIssuance: Int!
  "Address of the availability oracle"
  subgraphAvailabilityOracle: Bytes!

  # Curation global parameters
  "Default reserve ratio for all subgraphs"
  defaultReserveRatio: Int!
  "Minimum amount of tokens needed to start curating"
  minimumCurationDeposit: BigInt!
  "The fee charged when a curator withdraws signal"
  withdrawalFeePercentage: Int!

  # Curation global aggregate values
  "The total amount of GRT signalled in the Curation contract"
  totalTokensSignalled: BigInt!

  # Graph Token global variables
  "Graph Token supply"
  totalSupply: BigInt!
  "Price of one GRT in USD"
  GRTinUSD: BigDecimal!
  "Price of one GRT in ETH"
  GRTinETH: BigDecimal

  # Epoch manager global variables
  "Epoch Length in blocks"
  epochLength: Int!
  "Epoch that was last run"
  lastRunEpoch: Int!
  "Epoch when epoch length was last updated"
  lastLengthUpdateEpoch: Int!
  "Block when epoch length was last updated"
  lastLengthUpdateBlock: Int!
  "Current epoch the protocol is in"
  currentEpoch: Int!

  # Count aggregate values. Note, deprecations or inactives not removed from counts
  "Total indexers"
  indexerCount: Int!
  "Total delegators"
  delegatorCount: Int!
  "Total curators"
  curatorCount: Int!
  "Total subgraphs"
  subgraphCount: Int!
  "Total subgraphs"
  subgraphDeploymentCount: Int!
  "Total epochs"
  epochCount: Int!

  # Dispute Manager global variables - add when implemented
  "Penalty to Indexer on successful disputes"
  slashingPercentage: Int!
  # "Minimum deposit to create a dispute"
  # minimumDisputeDeposit: BigInt!
  # "Reward to Fisherman on successful disputes"
  # fishermanRewardPercentage: BigInt!
}

"""
An account within the graph network
"""
type GraphAccount @entity {
  "Graph account ID"
  id: ID!
  "All names this graph account has claimed from all name systems"
  names: [GraphAccountName!]! @derivedFrom(field: "graphAccount")
  "Default name the graph account has chosen"
  defaultName: GraphAccountName # Can optimize in future by checking ENS & others to make sure they still own the name
  "Time the account was created"
  createdAt: Int!

  # IPFS Metadata
  "True if it is an organization. False if it is an individual"
  isOrganization: Boolean
  "IPFS hash with account metadata details"
  metadataHash: Bytes
  "Main repository of code for the graph account"
  codeRepository: String
  "Description of the graph account"
  description: String
  "Image URL"
  image: String
  "Website URL"
  website: String
  "Display name. Not unique"
  displayName: String

  # Operator info
  "Operator of other Graph Accounts"
  operatorOf: [GraphAccount!]! @derivedFrom(field: "operators")
  "Operators of this Graph Accounts"
  operators: [GraphAccount!]!

  # GRT info
  "Graph token balance"
  balance: BigInt!
  "Amount this account has approved staking to transfer their GRT"
  curationApproval: BigInt!
  "Amount this account has approved curation to transfer their GRT"
  stakingApproval: BigInt!
  "Amount this account has approved the GNS to transfer their GRT"
  gnsApproval: BigInt!

  # Subgraphs
  "Subgraphs the graph account owns"
  subgraphs: [Subgraph!]! @derivedFrom(field: "owner")
  "Time that this graph account became a developer"
  developerCreatedAt: Int
  "Total query fees the subgraphs created by this account have accumulated in GRT"
  subgraphQueryFees: BigInt!

  # Disputes
  "Disputes this graph account has created"
  createdDisputes: [Dispute!]! @derivedFrom(field: "fisherman")
  "Disputes agaisnt this graph account"
  disputesAgainst: [Dispute!]! @derivedFrom(field: "indexers")
  # Staking and Curating and Delegating
  "Subgraphs this account curates"
  curator: Curator
  "Subgraphs this account indexes"
  indexer: Indexer
  "Subgraphs this account has delegated to"
  delegator: Delegator
}

"""
A name chose by a Graph Account from a Name System
"""
type GraphAccountName @entity {
  "Name system concatenated with the unique ID of the name system"
  id: ID!
  "Name system for this name"
  nameSystem: NameSystem!
  "Name from the system"
  name: String!
  "The graph account that owned the name when it was linked in the graph network"
  graphAccount: GraphAccount # May not match if the graph account proceeded to transfer away their name on that system
}

enum NameSystem {
  ENS
  # Everest # Add when implemented
  # Github  # Add when implemented
}

"""
Named subgraph data
"""
type Subgraph @entity {
  "Subgraph ID - which is derived from the Organization/Individual graph accountID"
  id: ID!
  "Graph account that owns this subgraph"
  owner: GraphAccount!
  "Current version. Null if the subgraph is deprecated"
  currentVersion: SubgraphVersion
  "Past versions"
  pastVersions: [SubgraphVersion!]!
  "Creation timestamp"
  createdAt: Int!
  "Updated timestamp"
  updatedAt: Int!

  # Name curation data for bonding curve
  # Note that the Subgraphs V signal is actually stored in a Signal object, which
  # considers the GNS as a curator updated on curation.ts
  "Tokens signalled for the name all time"
  signalledTokens: BigInt!
  "Tokens signalled for the name"
  unsignalledTokens: BigInt!
  "Current name signal amount for this subgraph"
  nameSignalAmount: BigInt!
  "Reserve ratio of the name curation curve"
  reserveRatio: Int!
  "Tokens that can be withdrawn once the name signal is deprecated"
  withdrawableTokens: BigInt!
  "Tokens the curators have withdrawn from the deprecated name signal"
  withdrawnTokens: BigInt!
  # "Total curator rewards from fees"
  # curatorFeeRewards: BigInt! TODO - I think I can delete this
  "Curators of this subgraph deployment"
  nameSignals: [NameSignal!]! @derivedFrom(field: "subgraph")

  # Metadata from IPFS linked in GNS
  "Subgraph metadata"
  metadataHash: Bytes!
  "Short description of the subgraph"
  description: String!
  "Image in string format"
  image: String!
  "Location of the code for this project"
  codeRepository: String!
  "Projects website"
  website: String!
  "Display name"
  displayName: String!

  # Aggregate data, by combining all versions, and all deployments those versions point to
  # TODO - i dont think these two are valid either. Since I can create my own subgraph of any project,
  #        point it to their subgraph, and it looks like my subgraph has a ton of rewards
  "Total inflation rewards earned all time by this subgraph"
  totalIndexingRewards: BigInt!
  "Total query fees earned by this subgraph"
  totalQueryFeesCollected: BigInt!

  # DAVE NOTE - the two below are really complex to calculate, i don't even know if there is a
  # way to do it efficiently. I would prefer to remove this unless there are strong convictions not to

  # "Total stake of all indexers on all subgraph versions. Includes delegation"
  # totalStake: BigInt!
  # "Total signal of all curators on all subgraph versions"
  # totalSignal: BigInt!
}

"""
Contains subgraph version metadata
"""
type SubgraphVersion @entity {
  "Concatenation of subgraph, subgraph deployment, and version ID"
  id: ID!
  "Subgraph of this version"
  subgraph: Subgraph!
  "Subgraph deployments of this version"
  subgraphDeployment: SubgraphDeployment!
  "Version number"
  version: Int!
  "Creation timestamp"
  createdAt: Int!

  # Metadata from IPFS linked in GNS
  "Subgraph version metadata content address"
  metadataHash: Bytes!
  "Short description of the version"
  description: String!
  "A human readable name"
  label: String!
}

"""
The immutable subgraph deployment defined by a subgraph manifest
"""
type SubgraphDeployment @entity {
  "Subgraph Deployment ID"
  id: ID!
  "The versions this subgraph deployment relates to"
  versions: [SubgraphVersion!]! @derivedFrom(field: "subgraphDeployment")
  "Creation timestamp"
  createdAt: Int!
  "The block at which this deployment was denied for rewards. Null if not denied"
  deniedAt: Int!
  "The original Subgraph that was deployed through GNS. Can be null if never created through GNS"
  originalName: String

  # From Staking
  "Total stake of all indexers on this Subgraph deployment"
  stakedTokens: BigInt!
  "Allocations created by indexers for this subgraph"
  indexerAllocations: [Allocation!]! @derivedFrom(field: "subgraphDeployment")
  "Total rewards accrued all time by this subgraph deployment"
  indexingRewardAmount: BigInt!
  "Total query fees earned by this subgraph deployment"
  queryFeesAmount: BigInt!
  "Total query fee rebates earned from the protocol by this subgraph deployment"
  queryFeeRebates: BigInt!
  "Total curator rewards from fees"
  curatorFeeRewards: BigInt!

  # Subgraph deployment curation bonding curve
  "Signalled tokens"
  signalledTokens: BigInt!
  "Unsignalled tokens"
  unsignalledTokens: BigInt!
  "Current curation signal for this subgraph deployment"
  signalAmount: BigInt!

  "Curators of this subgraph deployment"
  curatorSignals: [Signal!]! @derivedFrom(field: "subgraphDeployment")
  "Bonding curve reserve ratio"
  reserveRatio: Int!

  # From Subgraph Manifest
  # dataSources: [DataSource!] # - add a ! when we have the ability to parse data sources
}

# - add when we have the ability to parse data sources
# """Data source obtained from the subgraph manifest"""
# type DataSource @entity {
#   "Unique identifier of the data source. Such as contract address"
#   id: ID!
#   "Data source name in the manifest"
#   name: String!
#   "Networks that the subgraph deployment is indexing"
#   networks: [String!]!
#   "Contract"
#   contract: Contract!
#   "ABI of the contract"
#   abi: String!
# }

# type Contract @entity {
#   "Address of the contract"
#   id: ID!
#   "Contract name"
#   name: String
# }

"""
Metadata for the indexer along with parameters and stake information
"""
type Indexer @entity {
  "Eth address of Indexer"
  id: ID!
  "Time this indexer was created"
  createdAt: Int!
  "Graph account of this indexer"
  account: GraphAccount!
  "Service registry URL string"
  url: String
  "Geohash of the indexer"
  geoHash: String

  # Staking data
  "Current tokens staked in the protocol"
  stakedTokens: BigInt!
  "Total tokens allocated on all subgraphs"
  allocatedTokens: BigInt!
  "Tokens that have been unstaked and withdrawn"
  unstakedTokens: BigInt!
  "Current tokens locked"
  lockedTokens: BigInt!
  "The block when Indexers tokens unlock"
  tokensLockedUntil: Int!
  "Active allocations of stake for this Indexer"
  allocations: [Allocation!]! @derivedFrom(field: "indexer")
  "Total query fees earned by this indexer"
  queryFeesCollected: BigInt!
  "Query fee rebate amount claimed from the protocol"
  queryFeeRebates: BigInt!
  "Total indexing rewards earned by this indexer from inflation"
  rewardsEarned: BigInt!

  # Delegation Pool
  "Delegators to this Indexer"
  delegators: [DelegatedStake!]! @derivedFrom(field: "indexer")
  "Total tokens delegated to the indexer"
  delegatedTokens: BigInt!
  "Total shares of the delegator pool"
  delegatorShares: BigInt!
  "Total tokens available to be delegated"
  tokenCapacity: BigInt!
  "The percent the Indexer agrees to share with delegators"
  indexingRewardCut: Int!
  "The percent of query rebate rewards the Indexer agrees to share with delegators"
  queryFeeCut: Int!
  "Time delegator decides to wait for changing of their parameters"
  delegatorParameterCooldown: Int!
  "Block number for the last time the delegator updated their parameters"
  lastDelegationParameterUpdate: Int!
  "Count of how many times this indexer has been forced to settle"
  forcedSettlements: Int!

  # Metrics
  "Total return this indexer has earned"
  totalReturn: BigDecimal!
  "Annualized rate of return for the indexer"
  annualizedReturn: BigDecimal! # You must multiple by 100 to get percentage
  "Staking efficiency of the indexer"
  stakingEfficiency: BigDecimal!
}

"""
State channel allocation representing Indexer-SubgraphDeployment stake
"""
type Allocation @entity {
  "Channel Address"
  id: ID!
  "Price of the queries"
  price: BigInt!
  "Indexer of this allocation"
  indexer: Indexer!
  "Subgraph deployment that is being allocated"
  subgraphDeployment: SubgraphDeployment!
  "Tokens associated with the allocation"
  allocatedTokens: BigInt!
  "Effective allocation that is realized upon settling"
  effectiveAllocation: BigInt!
  "Epoch this allocation was created"
  createdAtEpoch: Int!
  "Block at which this allocation was created"
  createdAtBlockHash: Bytes!
  "Epoch this allocation was closed in"
  closedAtEpoch: Int!
  "Fees this allocation collected from query fees upon closing. Excludes curator reward and rebate claimed"
  queryFeesCollected: BigInt!
  "Rebate amount claimed from the protocol"
  queryFeeRebates: BigInt!
  "Curator rewards deposited to the curating bonding curve"
  curatorRewards: BigInt!
  "Indexing rewards earned by this allocation"
  indexingRewards: BigInt!
  "Pool in which this allocation was settled"
  poolSettledIn: Pool
  "Fees paid out to delegators"
  delegationFees: BigInt!
  "Status of the allocation"
  status: AllocationStatus!
  "Timestamp this allocation was created at"
  createdAt: Int!
  "POI submitted with a settlement"
  poi: Bytes

  # Metrics
  "Return for this allocation"
  totalReturn: BigDecimal!
  "Yearly annualzied return"
  annualizedReturn: BigDecimal!
}

# where we claim on the rebate pools. you essentially call a channel you claim funds from
# you can restake these tokens, or you can take them back (emit Rebate Claimed)

enum AllocationStatus {
  Null # == indexer == address(0)
  Active # == not Null && tokens > 0
  Settled # == Active && settledAtEpoch != 0
  Finalized # == Settling && settledAtEpoch + channelDisputeEpochs > now(). Note, this never happens in practice, because it is implied
  Claimed # == not Null && tokens == 0 - i.e. finalized, and all tokens withdrawn
}

"""
Global pool of query fees for settled state channels. There is one pool per epoch
"""
type Pool @entity {
  "Epoch number of the pool"
  id: ID!
  "Total allocation settled in this epoch - includes all effective allocation"
  allocation: BigInt!
  "Total query fees collected in this epoch"
  totalQueryFees: BigInt!
  "Total query fees claimed in this epoch. Can be larger than totalFees because of cobbs douglas function "
  claimedFees: BigInt!
  "Total rewards deposited to all curator bonding curves during the epoch"
  curatorRewards: BigInt!
  "Allocations that were settled during this epoch"
  settledAllocations: [Allocation!]! @derivedFrom(field: "poolSettledIn")
}

"""
Delegator with all their stakes
"""
type Delegator @entity {
  "Delegator address"
  id: ID!
  "Graph account of the delegator"
  account: GraphAccount!
  "Stakes of this delegator"
  stakes: [DelegatedStake!]! @derivedFrom(field: "delegator")
  "Summation of all staked tokens in DelegatorStakes of this Delegator"
  totalStakedTokens: BigInt!
  "Summation of all unstaked tokens in DelegatorStakes of this Delegator"
  totalUnstakedTokens: BigInt!
  "Time created at"
  createdAt: Int!
}

"""
Delegator stake for a single Indexer
"""
type DelegatedStake @entity {
  "Concatenation of Delegator address and Indexer address"
  id: ID!
  "Index the stake is delegated to"
  indexer: Indexer!
  "Delegator"
  delegator: Delegator!
  "Amount delegated all time (static)"
  stakedTokens: BigInt!
  "Amount un-delegated all time (static)"
  unstakedTokens: BigInt!
  "Amount currently locked"
  lockedTokens: BigInt!
  "Epoch the locked tokens are unlocked"
  lockedUntil: Int!
  "Shares owned in the delegator pool. Used to calculate total amount delegated"
  shareAmount: BigInt!
}

"""
Curator with all Signals and metrics
"""
type Curator @entity {
  "Eth address of the Curator"
  id: ID!
  "Time this curator was created"
  createdAt: Int!
  "Graph account of this curator"
  account: GraphAccount!
  "Total tokens signalled on all the subgraphs"
  totalSignalledTokens: BigInt!
  "Total tokens unsignalled on all the subgraphs"
  totalUnsignalledTokens: BigInt!
  "Subgraphs the curator is curating"
  signals: [Signal!]! @derivedFrom(field: "curator")

  "Total tokens signalled on all names"
  totalNameSignalledTokens: BigInt!
  "Total tokens unsignalled on all names"
  totalNameUnsignalledTokens: BigInt!
  "Total withdrawn tokens from deprecated subgraphs"
  totalWithdrawnTokens: BigInt!
  "Subgraphs the curator is curating"
  nameSignals: [NameSignal!]! @derivedFrom(field: "curator")

  # Metrics NOTE - will be hard to calculate these with the two types of signal
  "Summation of realized rewards from all Signals"
  realizedRewards: BigInt!
  "Annualized rate of return on curator signal"
  annualizedReturn: BigDecimal! # Multiple by 100 to get percentage
  "Total return of the curator"
  totalReturn: BigDecimal!
  "Signaling efficiency of the curator"
  signalingEfficiency: BigDecimal!
}

"""
Curator signal for a single Subgraph deployment
"""
type Signal @entity {
  "Eth address + subgraph deployment ID"
  id: ID!
  "Eth address of the curator"
  curator: Curator!
  "Subgraph being signalled"
  subgraphDeployment: SubgraphDeployment!
  "Cumulative number of tokens the curator has signalled"
  signalledTokens: BigInt!
  "Cumulative number of tokens the curator has unsignalled"
  unsignalledTokens: BigInt!
  "Signal that the curator has from signaling their GRT"
  signal: BigInt!

  # Metrics
  "Block for which the curator last entered or exited the curve"
  lastSignalChange: Int!
  # These are summed up and added whenever curator enters or exists the curve. Then we must calculate
  # unrealized gains for their current balance, based on the time since the last exit/entry of the curve
  "Summation of realized rewards from before the last time the curator entered the curation curve"
  realizedRewards: BigInt!
}

"""
Curator name signal for a single Subgraph
"""
type NameSignal @entity {
  "Eth address + subgraph ID"
  id: ID!
  "Eth address of the curator"
  curator: Curator!
  "Subgraph being signalled"
  subgraph: Subgraph!
  "Cumulative number of tokens the curator has signalled"
  signalledTokens: BigInt!
  "Cumulative number of tokens the curator has unsignalled"
  unsignalledTokens: BigInt!
  "Tokens the curator has withdrawn from a deprecated name curve"
  withdrawnTokens: BigInt!
  "Signal that the curator has from signaling their GRT"
  nameSignal: BigInt!
  # Note , we don't show vSignal here. We could, but it has almost no value to display it.
  # We can get away with using curator nameSignal, total n and v signal on the subgraph.

  # Metrics
  "Block for which the curator last entered or exited the curve"
  lastNameSignalChange: Int!
  # These are summed up and added whenever curator enters or exists the curve. Then we must calculate
  # unrealized gains for their current balance, based on the time since the last exit/entry of the curve
  "Summation of realized rewards from before the last time the curator entered the curation curve"
  realizedRewards: BigInt!
}

"""
Dispute of a query. Includes single query, conflicting attestation, and indexing dispute
"""
type Dispute @entity {
  "Dispute ID"
  id: ID!
  "Subgraph deployment being disputed"
  subgraphDeployment: SubgraphDeployment!
  "Fisherman address"
  fisherman: GraphAccount!
  "Fisherman deposit"
  deposit: BigInt!

  "Time dispute was created"
  createdAt: Int!
  "Time dispute was closed at"
  closedAt: Int
  "Status of the dispute"
  status: DisputeStatus!
  "Tokens slashed"
  tokensSlashed: BigInt!
  "Tokens rewarded"
  tokensRewarded: BigInt!

  # Type specific data below
  "Type of dispute"
  type: DisputeType!
  "Indexer(s) disputed. Conflicting disputes have 2 indexers. Others have 1"
  indexers: [GraphAccount!]!
  "Attestation 1. Only for single query and conflicting attestation"
  attestation1: Attestation
  "Attestation 2. Only for conflicting attestation"
  attestation2: Attestation
  "Allocation ID. Only for Indexing Disputes"
  allocation: Allocation
}

"""
Attestation of a dispute
"""
type Attestation @entity {
  "Concatenation of the requestCID and responseCID"
  id: ID!
  "Subgraph deployment being disputed"
  subgraphDeployment: SubgraphDeployment!
  "RequestCID"
  requestCID: String!
  "ResponseCID"
  responseCID: String!
  "Gas used by the attested query"
  gasUsed: BigInt!
  "Bytes of attested query"
  responseNumBytes: BigInt!
  "V of the indexers signature"
  v: Int!
  "R of the indexers signature"
  r: Bytes!
  "S of the indexers signature"
  s: Bytes!
}

enum DisputeType {
  SingleQuery
  Conflicting
  Indexing
}

enum DisputeStatus {
  Undecided
  Accepted
  Rejected
  Draw
  Indexer1Correct
  Indexer2Correct
}

"""
Epoch data
"""
type Epoch @entity {
  "Epoch number"
  id: ID!
  "Start block of the epoch"
  startBlock: Int!
  "End block of the epoch"
  endBlock: Int!
  "Signal created during this epoch"
  signalledTokens: BigInt! # sum(signal - unsignalled)
  "Stake deposited during this epoch"
  stakeDeposited: BigInt! # sum(stake - unstake)
  # "Query fees collected during this epoch"
  # totalQueryFees: BigInt! # Note - this is the exact same as pool.totalFees, so its removed
  "Rebate amount claimed from the protocol in this epoch"
  queryFeeRebates: BigInt!
  "Total indexing rewards earned in this epoch"
  totalRewards: BigInt!
  # todo - DO I NEED totalQueryFees / Protocol rebates earned?
}

type _Schema_
  @fulltext(
    name: "subgraphSearch"
    language: en
    algorithm: rank
    include: [{ entity: "Subgraph", fields: [{ name: "displayName" }, { name: "description" }] }]
  )